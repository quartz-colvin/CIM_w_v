---
title: "brainstorm"
output: html_document
---

The data consists of values for 

- speaker (initials)

- island 

- textgridlabel? 

- word

- previous label and following label

- start, end, duration 

- f0_20, f0_50, f0_80

- f1 midpoint 

- f2 midpoint

- f3 midpoint

- intensity midpoint


**Rolando's notes**

(2) The CSV has some acoustic measurements for the phoneme "v", and for the vowels before and after it. I've included the F0 at different points (which should give us an idea of voicing), the duration of the phoneme, its intensity, and the F1, F2 and F3 of the vowels before and after it. Our hypothesis is that, sometimes, the "v" is closer to a "w", with more voicing and intensity, and a longer duration perhaps? 

(3) If you would like to extract other measurements (that Praat might be able to give us), please let me know. Also, if you want particular audio samples, let me know the file name and time.


**Hypotheses to test**

1. Is w associated with more voicing (f0 at different points) than v?

2. Is w associated with higher intensity than v?

3. Is w associated with a longer duration than v?

4. 

**Plan**

Tidy the data 

1. read csv file plus setup

```{r}
#| label: read-csv
#| message: false
#| warning: false

library("tidyverse")
library("tidyr")
library("here")
library("itsadug")
library("mgcv")

source(here::here("scripts", "libs.R"))

untidy_data <- read_csv(here("untidy_data", "cim-v-w-202410.csv"))

```

Then we can preview the data!


```{r}
#| label: glimpse-cim

head(untidy_data)

```

Good lord it's messy! We should tidy it.

2. mutate the data so that we only have columns for name, island, textgridlabel, word, each f0 value, intensity, duration 

```{r}
#| label: tidy-f0
#| echo: true
#| message: false
#| warning: false

dat <- untidy_data |>
  drop_na() |>   # remove rows that have NA values
  filter(TextGridLabel == "v") |>   # filter by 'v' for analysis
  pivot_longer(      # deal with all the f0 columns
    cols = c("f0_20.point", 
             "f0_50.point", 
             "f0_80.point"),
    names_to = "percent",    # names to 'percent' column
    values_to = "hz"      # values to one column called 'hz'
  ) |>
  arrange(island, Word) |>  
  select(speaker, island,   # group by 'island', then 'word'    # pick which columns I want and rename some
         word = Word, 
         percent, hz, f2 = F2_midpoint, duration, 
         intensity = intensity_midpoint) |>
  write_csv("tidy_cim.csv")    # put tidy data in new .csv
```

```{r}
#| label: change-percents
#| warning: false
#| message: false

dat$percent[dat$percent == 'f0_20.point'] <- "20"

dat$percent[dat$percent == 'f0_50.point'] <- "50"

dat$percent[dat$percent == 'f0_80.point'] <- "80"

```


3. filter textgridlabel so that it only has values of w and v **DONE!**


4. present tidy data as: name, island, Word, duration, f0_20, f0_50, f0_80, intensity

**Here is the tidy data, but not the whole table because it is quite lengthy.**

```{r}
#| label: show-tidy-data
#| warning: false
#| message: false

knitr::kable(head(dat))

```


5. fit model to see for textgridtoken v, how do f0 points progress? add a line of best fit for w and v

- **do the same thing the paper i did my online pres on. plot all the f0 values on y axis and time on x axis, color by island ???**

```{r}
#| label: f0-traj-mod
#| warning: false
#| message: false
#| out-width: "100%"

mod_f0 <- dat |>
  ggplot() + 
  aes(x = duration, y = hz, color = island) +
  geom_point() +
  geom_smooth(
    method="glm",
    method.args = list(family = "poisson")
  ) +
  facet_wrap(~island) +
  labs(
    title = "F0 values by duration across the Cook Islands", 
    x = "Duration", 
    y = "F0 (Hz)"
  ) 

print(mod_f0)

```




6. calculate average intensity for w **DONE**

```{r}
#| label: intensity-by-island
#| warning: false
#| message: false

mod2 <- lm(formula = intensity ~ island, data = dat) |>
  ggplot() +
  aes(x = island, y = intensity, color = island) +
  geom_boxplot()

print(mod2)

```


```{r}
#| label: avg-intensity
#| message: false
#| warning: false

mean(dat$intensity)

```


7. calculate average duration for w **DONE**

```{r}
#| label: duration-by-island
#| warning: false
#| message: false

mod1 <- lm(formula = duration ~ island, data = dat) |>
  ggplot() +
  aes(x = island, y = duration, color = island) +
  geom_boxplot()

print(mod1)

```

```{r}
#| label: avg-dur
#| message: false
#| warning: false

mean(dat$duration)

```

**Calculate descriptive statistics for mod1 and mod2**

```{r}
#| label: descriptive-stats
#| warning: false
#| message: false

summary(mod1)

summary(mod2)

```


